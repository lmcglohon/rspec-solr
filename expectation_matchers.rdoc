= SolrTestFramework Custom Matchers for RSpec

(solr_response.should ...  or solr_response.should_not ...)

== NUMBER OF RESULTS

=== Potential Syntax:
* solr_response.should have results
* solr_response.should have_results
* solr_response.should get_results

=== Matchers
* have_results
* have_at_least(3).results  # numFound / total number of matching docs
* have_at_most(3).results
* have_exactly(4).results   or    have(4).results


== DOCUMENTS IN RESPONSE

=== Specifying Documents
* document(:fldname => "value")
* document("idval")  # value of the unique id field in the solr document
* documents(:fldname => ["val1, val2, val3"])
* document(:fld1 => "val1", :fld2 => "val2")   # doc must meet both predicates
* document(:fldname => "/regex/")

=== Potential Syntax 
* solr_response.should_include document()
* solr_response.should include_document()
* solr_response.should include document()
* ... have ...

=== Matchers
* include document() 
* include documents()   # if array, should_not implies NONE of them should be included
* include_document().in_first(2).results
* include_documents().in_first(4).results
* include_at_least(3).of_these_documents().in_first(3).results


== ORDER OF DOCUMENTS

=== Potential Syntax:
* solr_response.document().should come_before_document()
* solr_response.document().should come_before_document()
* solr_response.should include_document().before_document()
* subject.document(:title => 'vala').should come_before(subject.document(:title =>'valb'))
* subject.should have_result_field_ordered("title", "vala", "valb") 

=== Matchers
* include_document().before_document()
* include_documents().before_document()
* include_document().before_documents()
* include_documents().before_documents()

* include_document().within(3)_positions_of_document()


== FACET VALUES IN RESPONSE

=== Specifying Facet Values
* facet(:format => "Book")
* facets(:format => ["Image", "Map"])

=== Potential Syntax

=== Matchers
* include_facet().before_facet()
* include_facets().before_facet()
* include_facet().before_facets()
* include_facets().before_facets()


== COMPARING TWO RESPONSES

=== Specifying Second Response
* than_solr_response({:q => "foo", :sort => "title"})  # solr params
* than_search_for("foo")  # only q is specified, defaults for everything else

=== Potential Syntax

=== Matchers
* have_more_results_than_solr_response(:params)
* have_fewer_results_than_solr_response(:params)
* have_the_same_number_of_results_as_solr_response(:params)

